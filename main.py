import os, logging, httpx, atexit
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from contextlib import asynccontextmanager
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# --- Logging ---
logging.basicConfig(format="%(asctime)s [%(levelname)s] %(message)s", level=logging.INFO)
atexit.register(lambda: logging.info("üî• Process is exiting"))
load_dotenv()
TOKEN, WEBHOOK_URL = os.getenv("TOKEN"), os.getenv("WEBHOOK_URL")
if not TOKEN or not WEBHOOK_URL: raise ValueError("TOKEN and WEBHOOK_URL must be set")

async def check_balance(card: str) -> str:
    try:
        async with httpx.AsyncClient(timeout=10) as c:
            r = await c.post("https://transport-api.yerevan.am/api/citizen/card-status/",
                             json={"card_number": card}, headers={"Content-Type": "application/json"})
            r.raise_for_status()
            return str(r.json()["card_status"]["Subscriptions"][0]["TripsLeft"])
    except Exception: logging.exception("Balance check failed"); return "‚ö†Ô∏è ’î’°÷Ä’ø’´ ’æ÷Ä’° ’°’Ø’ø’´’æ ’ø’∏’¥’Ω ’π’´ ’£’ø’∂’æ’•’¨"

def kb(saved: str | None) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        ([[f"üí≥ ’ï’£’ø’°’£’∏÷Ä’Æ’•’¨ ’∫’°’∞’æ’°’Æ ÷Ñ’°÷Ä’ø’® ({saved})"]] if saved else []) + [["‚ñ∂Ô∏è ’ç‘ø’ç‘µ‘º"]],
        resize_keyboard=True
    )

async def start(update: Update, ctx) -> None:
    await update.message.reply_text("üëã ‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø!\n’ç’•’≤’¥’•÷Ñ ¬´’ç‘ø’ç‘µ‘º¬ª ’Ø’°’¥ ’®’∂’ø÷Ä’•÷Ñ ’∫’°’∞’æ’°’Æ ÷Ñ’°÷Ä’ø’®÷â",
                                    reply_markup=kb(ctx.user_data.get("card")))

async def ask(update: Update, ctx) -> None:
    t, saved = update.message.text, ctx.user_data.get("card")
    if t.startswith("üí≥") and saved:
        await update.message.reply_text(f"üîé ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’¥ ÷Ñ’°÷Ä’ø’´ {saved} ’¥’∂’°÷Å’∏÷Ä’§’®‚Ä¶")
        await update.message.reply_text(f"üí≥ ’î’°÷Ä’ø’ù {saved}\n’Ñ’∂’°÷Å’∏÷Ä’§’ù {await check_balance(saved)}",
                                        reply_markup=kb(saved))
    elif "’ç‘ø’ç‘µ‘º" in t: await update.message.reply_text("’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’±’•÷Ä 16-’°’∂’´’∑ ÷Ñ’°÷Ä’ø’´ ’∞’°’¥’°÷Ä’®÷â", reply_markup=ReplyKeyboardRemove())

async def handle_card(update: Update, ctx) -> None:
    card = update.message.text.strip()
    if not (card.isdigit() and len(card) == 16): await update.message.reply_text("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’æ’°’æ’•÷Ä 16-’°’∂’´’∑ ÷Ñ’°÷Ä’ø’´ ’∞’°’¥’°÷Ä÷â"); return
    ctx.user_data["card"] = card
    await update.message.reply_text("üîé ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’¥, ’≠’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’Ω’∫’°’Ω’•’¨‚Ä¶")
    await update.message.reply_text(f"üí≥ ’î’°÷Ä’ø’ù {card}\n’Ñ’∂’°÷Å’∏÷Ä’§’ù {await check_balance(card)}", reply_markup=kb(card))

bot_app = Application.builder().token(TOKEN).build()
bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(MessageHandler(filters.Regex("’ç‘ø’ç‘µ‘º|’ï’£’ø’°’£’∏÷Ä’Æ’•’¨ ’∫’°’∞’æ’°’Æ ÷Ñ’°÷Ä’ø’®"), ask))
bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_card))

@asynccontextmanager
async def lifespan(_: FastAPI):
    logging.info("ü§ñ Starting bot in webhook mode‚Ä¶")
    await bot_app.initialize()
    await bot_app.start()
    await bot_app.bot.set_webhook(WEBHOOK_URL)
    try:
        yield
    finally:
        logging.info("üõë Stopping bot‚Ä¶")
        await bot_app.bot.delete_webhook()
        await bot_app.stop()
        await bot_app.shutdown()

app = FastAPI(lifespan=lifespan)

@app.post("/webhook")
async def webhook(r: Request):
    await bot_app.update_queue.put(Update.de_json(await r.json(), bot_app.bot))
    return {"ok": True}

@app.get("/")
async def root(): return {"message": "Bot is running üöÄ"}

if __name__ == "__main__" and not os.getenv("WASMER"):
    import uvicorn; uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)